asyncapi: 2.0.0
info:
  title: My Circular API
  version: '1.0.0'
  # Dummy check circular references in custom extensions in non-schema object
  x-recursive:
    type: array
    items:
      $ref: '#/components/schemas/RecursiveSelf'

channels:
  nonRecursive:
    subscribe:
      message:
        payload:
          $ref: '#/components/schemas/NonRecursive'
  nonRecursiveExternalFile:
    publish:
      message:
        payload:
          $ref: './good/circular-refs-file-ref-2.yaml#/NonRecursive'
  recursive:
    subscribe:
      message:
        payload:
          $ref: '#/components/schemas/RecursiveSelf'

  recursiveExternalFile:
    publish:
      message:
        payload:
          $ref: './good/circular-refs-file-ref-2.yaml#/Recursive'
        # Dummy check circular references in bindings (also custom)
        bindings:
          resursiveBinding:
            someValue: foobar
            recursive:
              $ref: '#/channels/recursiveExternalFile/publish/message/bindings/resursiveBinding'

components:
  schemas:
    NonRecursive:
      type: object
      properties:
        child:
          $ref: '#/components/schemas/NonRecursiveChild'
    NonRecursiveChild:
      type: object
      properties:
        value:
          type: string
    # check if pre or after ancestor has impact on logic for handling circular refs
    PreRecursiveAncestor:
      type: object
      properties:
        ancestorChildren:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveSelf'
        ancestorSomething:
          type: string
    RecursiveSelf:
      type: object
      properties:
        selfObject:
          type: object
          properties:
            recursive:
              $ref: '#/components/schemas/RecursiveSelf'
            nonRecursive:
              type: string
        selfItems:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveSelf'
        selfAncestor:
          type: object
          properties:
            recursive: 
              $ref: '#/components/schemas/RecursiveAncestor'
        preAncestor:
          type: object
          properties:
            recursive: 
              $ref: '#/components/schemas/PreRecursiveAncestor'
        selfInline:
          $ref: '#/components/schemas/RecursiveSelf'
        selfSomething:
          type: string
      # Dummy check circular references in custom extensions
      x-recursive:
        $ref: '#/components/schemas/RecursiveSelf'
    RecursiveAncestor:
      type: object
      properties:
        ancestorChildren:
          type: array
          items:
            $ref: '#/components/schemas/RecursiveSelf'
        ancestorSomething:
          type: string
    RecursiveComplex:
      type: [object, array]
      patternProperties:
        ^foo: 
          $ref: '#/components/schemas/RecursiveComplex'
        ^bar: 
          type: string
      contains:
        $ref: '#/components/schemas/RecursiveComplex'
      items:
        - type: string
        - $ref: '#/components/schemas/RecursiveComplex'
      if:
        $ref: '#/components/schemas/RecursiveAncestor'
      then:
        $ref: '#/components/schemas/RecursiveComplex'
    # example from https://github.com/asyncapi/html-template/issues/165
    RecursiveCombinedSchema:
      type: object
      properties: 
        kind: 
          oneOf:
            - $ref: '#/components/schemas/RecursiveCombinedSchema'
            - type: string
            - enum:
              - boolean
              - string 
    # example from https://github.com/asyncapi/html-template/issues/165
    RecursiveCombinedSchema2:
      anyOf:
        - type: integer
        - type: number
        - type: string
        - type: boolean
        - type: object
        - type: array
          items:
            $ref: "#/components/schemas/RecursiveCombinedSchema2"
    NormalSchemaA:
      type: object
      properties:
        schemaBReference:
          $ref: '#/components/schemas/NormalSchemaB'
        schemaCReference:
          $ref: '#/components/schemas/NormalSchemaC'
        commonEnumName:
          type: string
          enum:
            - ENUM_1
            - ENUM_2
    NormalSchemaB:
      type: string
      enum:
        - ENUM_A
        - ENUM_B
        - ENUM_C
        - ENUM_D
    NormalSchemaC:
      allOf:
        - $ref: '#/components/schemas/NormalSchemaB'
        - type: string
          enum:
            - ENUM_E

# asyncapi: 2.0.0
# info:
#   title: My Circular API
#   version: '1.0.0'

# channels:
#   nonRecursive:
#     subscribe:
#       message:
#         payload:
#           type: object

# components:
#   schemas:
#     PreRecursiveAncestor:
#       type: object
#       properties:
#         ancestorChildren:
#           type: array
#           items:
#             $ref: '#/components/schemas/RecursiveSelf'
#         ancestorSomething:
#           type: string
#     RecursiveSelf:
#       type: object
#       properties:
#         selfObject:
#           type: object
#           properties:
#             recursive:
#               $ref: '#/components/schemas/RecursiveSelf'
#             nonRecursive:
#               type: string
#         selfItems:
#           type: array
#           items:
#             $ref: '#/components/schemas/RecursiveSelf'
#         selfInline:
#           $ref: '#/components/schemas/RecursiveSelf'
#         selfAncestor:
#           type: object
#           properties:
#             recursive: 
#               $ref: '#/components/schemas/RecursiveAncestor'
#         preAncestor:
#           type: object
#           properties:
#             recursive: 
#               $ref: '#/components/schemas/PreRecursiveAncestor'
#         something:
#           type: string
#       # Dummy check circular references in custom extensions
#       x-recursive:
#         $ref: '#/components/schemas/RecursiveSelf'
#     RecursiveAncestor:
#       type: object
#       properties:
#         ancestorChildren:
#           type: array
#           items:
#             $ref: '#/components/schemas/RecursiveSelf'
#         ancestorSomething:
#           type: string
#     RecursiveComplex:
#       if:
#         $ref: '#/components/schemas/RecursiveAncestor'
